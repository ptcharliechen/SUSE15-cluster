--- main.F	2023-11-21 23:15:30.960872283 -0500
+++ main.F	2023-11-22 19:05:54.141029607 -0500
@@ -71,6 +71,28 @@
 ! (except for native 64-bit-REAL machines like CRAY style machines)
 !**********************************************************************
 
+!=========================== CP-VASP Acknowledgment ===========================!
+! CP-VASP was developed to enable DFT calculations under a constant
+! electrode potential. Using CP-VASP, the electron number, energy, and
+! forces can be determined for any structure under a given potential.
+! Thus, CP-VASP enables structural relaxation and molecular dynamics
+! under a fixed electrode potential.
+! 
+! The code was originally developed by Xunhua Zhao and optimized by
+! Zachary Levell and Saerom Yu at Yuanyue Liu's group. If you use this
+! code in a future publication, please cite the following papers:
+!     •	Zhao, X.; Liu, Y. Origin of Selective Production of Hydrogen 
+!       Peroxide by Electrochemical Oxygen Reduction. Journal of the 
+!       American Chemical Society 2021, 143 (25), 9423-9428.
+!     •	Yu, S.; Levell, Z.; Jiang, Z.; Zhao, X.; Liu, Y. What Is the 
+!       Rate-Limiting Step of Oxygen Reduction Reaction on Fe–N–C 
+!       Catalysts? Journal of the American Chemical Society 2023, 145 
+!       (46), 25352-25356.
+!
+! If you have any questions or run into any issues, please email us at
+! conepot9@gmail.com and we will be happy to assist you.
+!==============================================================================!
+
       PROGRAM VAMP
       USE prec
 
@@ -208,6 +230,8 @@
       USE minimax_struct, ONLY : imag_grid_handle, MINIMAX_INTEGRATION_TEST
       USE minimax, ONLY : SET_IMAG_GRID_HANDLE, DEALLOCATE_IMAG_GRID_HANDLE
 #endif
+!cpm
+      USE POT_K, ONLY: FERMISHIFT, FSOLV_CORR
       USE tutor, ONLY: vtutor, isError, isAlert, isWarning, isAdvice, argument, &
           ISYM_MD, RandomSeed, VASP_4_4, DoubleCounting, FFTGridIsNotSufficient, &
           HighestBandsOcccupied, PartialDOS, LVTOT, NBANDSchanged, NumberOfElectrons, &
@@ -430,6 +454,27 @@
       INTEGER :: IH5ERR
       CHARACTER(3) :: POTENTIALTYP
 #endif
+!cpm
+      REAL(q) TARGETMU  ! This corresponds to potential in experiment
+      REAL(q) echange  ! change of the Ne(amount of electrons) in a step
+      REAL(q) INIT_ECHANGE
+      REAL(q) CNNE
+      REAL(q) GCE
+      REAL(q) CAPACITANCE
+      REAL(q) ECHANGE_MAX  ! The maximum electron number change allowed
+      REAL(q) CAP_MAX  !  The maximum magnitude of the electron capacitance
+      REAL(q) capmin
+      REAL(q) FERMICONVERGE  ! convergence criterion for EFERMI wrt. TARGETMU
+      REAL(q) old_nele  ! Record of the previous step's electron number
+      REAL(q) old_phi  ! Record of the previous step's Fermi level
+      REAL(q) old_cap
+      REAL(q) Pn
+      REAL(q) PnDrv
+      Real(q) Mn
+      INTEGER NEADJUST  ! change Ne in every NEADJUST ionic steps in MD
+      INTEGER NESCHEME  ! which electron adjustment scheme to use
+      INTEGER SCF_COUNTER  ! count the number of SCF loops in an ionic step
+      LOGICAL LCEP  ! turns on constant potential model
 #ifdef PROFILING
 !=======================================================================
 !  initialise profiling
@@ -656,6 +701,8 @@
 #ifdef libbeef
          ,LBEEFENS,LBEEFBAS &
 #endif
+!cpm
+         ,TARGETMU,INIT_ECHANGE,ECHANGE_MAX,CAP_MAX,NEADJUST,NESCHEME,FERMICONVERGE,LCEP,Pn,Mn &
          )
       CALL OMP_READER(IO%IU5,IO%IU0)
       CALL MPI_READER(IO%IU5,IO%IU0)
@@ -2576,6 +2623,8 @@
             IF(IO%IU6>=0)  WRITE(TIU6,200) RHOTOT(1:WDES%NCDIJ)
  200        FORMAT(' number of electron ',F15.7,' magnetization ',3F15.7)
          ENDIF
+!cpm
+         CNNE = RHOTOT(1) 
 
       ! set the partial core density
          DENCOR=0
@@ -2977,7 +3026,12 @@
       CALL INIT_WRITER(P,T_INFO,WDES)
 !=======================================================================
       ion: DO
-      IF (INFO%LSTOP) EXIT ion
+!cpm
+      IF(LCEP .AND. (DYN%IBRION==1 .OR. DYN%IBRION==2 .OR. DYN%IBRION==3)) THEN
+        IF(ABS(TARGETMU - EFERMI - FERMISHIFT) < FERMICONVERGE .AND. INFO%LSTOP) EXIT ion
+      ELSE
+        IF (INFO%LSTOP) EXIT ion
+      ENDIF
 !=======================================================================
 
 !  reset broyden mixing
@@ -3024,7 +3078,340 @@
 
       CALL XML_TAG("calculation")
 
-      CALL ELECTRONIC_OPTIMIZATION
+!================================ cpm modification ==================================!
+      if (LCEP .AND. DYN%IBRION==0) then
+        FSOLV_CORR = .FALSE.
+        capmin = 0.0
+        if (NSTEP == 1) old_cap = 0.1
+
+        if (MOD(NSTEP,NEADJUST) == 0 ) then
+          LSOL=.True.
+        else if (NSTEP == 1) then
+          LSOL=.True.
+        else
+          LSOL=.False.
+          Ediel_sol = 0.0
+        end if
+
+        if(LSOL) then
+          IF (NESCHEME .eq. 1) THEN
+            IF (NSTEP == 1) THEN
+              SCF_COUNTER = 1
+              DO
+                IF (SCF_COUNTER > 1) THEN
+                  INFO%NELECT = INFO%NELECT + echange
+                  DO I=1,GRIDC%MPLWV
+                    DO J=1,WDES%NCDIJ
+                      CHTOT(I,J) = CHTOT(I,J) * (INFO%NELECT) / (INFO%NELECT - echange)
+                    END DO
+                  END DO
+                END IF
+                CALL ELECTRONIC_OPTIMIZATION
+
+                IF (SCF_COUNTER == 1) THEN
+                  echange = sign(INIT_ECHANGE, (TARGETMU - EFERMI - FERMISHIFT))
+                  CAPACITANCE = 0.5
+                ELSE
+                  CAPACITANCE  = (INFO%NELECT - old_nele) / (EFERMI + FERMISHIFT - old_phi)
+                  if (CAPACITANCE .lt. capmin) then
+                    CAPACITANCE = old_cap
+                  endif
+                  if (CAPACITANCE .gt. CAP_MAX) then
+                    CAPACITANCE = CAP_MAX
+                  endif
+                  echange = (TARGETMU - EFERMI - FERMISHIFT) * CAPACITANCE
+                ENDIF
+                if (ABS(echange) .gt. ECHANGE_MAX .AND. ECHANGE_MAX .gt. 0) echange = sign(ECHANGE_MAX, echange)
+
+                old_nele = INFO%NELECT
+                old_phi = EFERMI + FERMISHIFT
+                old_cap = CAPACITANCE
+                IF (ABS(TARGETMU - old_phi) < FERMICONVERGE) THEN 
+                  exit
+                ELSE
+                  IF (IO%IU0>=0) WRITE(TIU0, 2981) NSTEP, SCF_COUNTER, INFO%NELECT, old_phi, TARGETMU, CAPACITANCE
+                  IF (IO%IU0>=0) WRITE(17, 2981) NSTEP, SCF_COUNTER, INFO%NELECT, old_phi, TARGETMU, CAPACITANCE
+                  
+                  SCF_COUNTER = SCF_COUNTER + 1
+                END IF
+              ENDDO
+
+2981          FORMAT('CPM-scf: NSTEP= ',I4, ' SCF= ',I4, ' N_ele= ', f12.6, ' mu_e= ', f10.6,' TARGET= ',f10.6, ' cap= ', f10.6)
+              
+              CALL SOL_VCORRECTION(INFO,T_INFO,LATT_CUR,P,WDES,GRIDC,CHTOT,CVTOT,-1.0)
+              LSOL = .FALSE.
+              Ediel_sol = 0.0
+            ELSE
+              INFO%NELECT = INFO%NELECT + echange
+              DO I=1,GRIDC%MPLWV
+                DO J=1,WDES%NCDIJ
+                CHTOT(I,J) = CHTOT(I,J) * (INFO%NELECT) / (INFO%NELECT-echange)
+                END DO
+              END DO
+              CALL ELECTRONIC_OPTIMIZATION
+              CALL SOL_VCORRECTION(INFO,T_INFO,LATT_CUR,P,WDES,GRIDC,CHTOT,CVTOT,-1.0)
+              LSOL = .FALSE.
+              Ediel_sol = 0.0
+              CAPACITANCE  = (INFO%NELECT - old_nele) / (EFERMI + FERMISHIFT - old_phi)
+              if (CAPACITANCE .gt. CAP_MAX) then
+                CAPACITANCE = CAP_MAX
+              endif
+              if (CAPACITANCE .lt. capmin) then
+                CAPACITANCE = old_cap
+              endif
+              echange = (TARGETMU - EFERMI - FERMISHIFT) * CAPACITANCE
+              if (ABS(echange) .gt. ECHANGE_MAX .AND. ECHANGE_MAX .gt. 0) echange = sign(ECHANGE_MAX, echange)
+              old_nele = INFO%NELECT
+              old_phi = EFERMI + FERMISHIFT
+              old_cap = CAPACITANCE
+            END IF
+            
+          ELSE IF (NESCHEME .eq. 2) THEN
+            IF (NSTEP == 1) THEN
+              CALL ELECTRONIC_OPTIMIZATION
+              CALL SOL_VCORRECTION(INFO,T_INFO,LATT_CUR,P,WDES,GRIDC,CHTOT,CVTOT,-1.0)
+              LSOL = .FALSE.
+              Ediel_sol = 0.0
+              echange = sign(INIT_ECHANGE, (TARGETMU - EFERMI - FERMISHIFT))
+              CAPACITANCE = 0.5
+            ELSE
+              INFO%NELECT = INFO%NELECT + echange
+              DO I=1,GRIDC%MPLWV
+                DO J=1,WDES%NCDIJ
+                  CHTOT(I,J) = CHTOT(I,J) * (INFO%NELECT) / (INFO%NELECT-echange)
+                END DO
+              END DO
+              CALL ELECTRONIC_OPTIMIZATION
+              CALL SOL_VCORRECTION(INFO,T_INFO,LATT_CUR,P,WDES,GRIDC,CHTOT,CVTOT,-1.0)
+              LSOL = .FALSE.
+              Ediel_sol = 0.0
+              CAPACITANCE  = (INFO%NELECT - old_nele) / (EFERMI + FERMISHIFT - old_phi)
+              if (CAPACITANCE .lt. capmin) then
+                CAPACITANCE = old_cap
+              endif
+              if (CAPACITANCE .gt. CAP_MAX) then
+                CAPACITANCE = CAP_MAX
+              endif
+              echange = (TARGETMU - EFERMI - FERMISHIFT) * CAPACITANCE
+            ENDIF
+            if (ABS(echange) .gt. ECHANGE_MAX .AND. ECHANGE_MAX .gt. 0) echange = sign(ECHANGE_MAX, echange)
+            old_nele = INFO%NELECT
+            old_phi = EFERMI + FERMISHIFT
+            old_cap = CAPACITANCE
+
+          ELSE IF (NESCHEME .eq. 3) THEN
+            SCF_COUNTER = 1
+            DO
+              IF (NSTEP > 1 .OR. SCF_COUNTER > 1) THEN
+                INFO%NELECT = INFO%NELECT + echange
+                DO I=1,GRIDC%MPLWV
+                  DO J=1,WDES%NCDIJ
+                    CHTOT(I,J) = CHTOT(I,J) * (INFO%NELECT) / (INFO%NELECT - echange)
+                  END DO
+                END DO
+              END IF
+              CALL ELECTRONIC_OPTIMIZATION
+            
+              IF (NSTEP == 1 .AND. SCF_COUNTER == 1) THEN
+                echange = sign(INIT_ECHANGE, (TARGETMU - EFERMI - FERMISHIFT))
+                CAPACITANCE = 0.5
+              ELSE
+                CAPACITANCE  = (INFO%NELECT - old_nele) / (EFERMI + FERMISHIFT - old_phi)
+                if (CAPACITANCE .lt. capmin) then
+                  CAPACITANCE = old_cap
+                endif
+                if (CAPACITANCE .gt. CAP_MAX) then
+                  CAPACITANCE = CAP_MAX
+                endif
+                echange = (TARGETMU - EFERMI - FERMISHIFT) * CAPACITANCE
+              ENDIF
+              if (ABS(echange) .gt. ECHANGE_MAX .AND. ECHANGE_MAX .gt. 0) echange = sign(ECHANGE_MAX, echange)
+            
+              old_nele = INFO%NELECT
+              old_phi = EFERMI + FERMISHIFT
+              old_cap = CAPACITANCE
+              IF (ABS(TARGETMU - old_phi) < FERMICONVERGE) THEN
+                exit
+              ELSE
+                IF (IO%IU0>=0) WRITE(TIU0, 2981) NSTEP, SCF_COUNTER, INFO%NELECT, old_phi, TARGETMU, CAPACITANCE
+                IF (IO%IU0>=0) WRITE(17, 2981) NSTEP, SCF_COUNTER, INFO%NELECT, old_phi, TARGETMU, CAPACITANCE
+                SCF_COUNTER = SCF_COUNTER + 1
+              END IF
+            ENDDO
+            CALL SOL_VCORRECTION(INFO,T_INFO,LATT_CUR,P,WDES,GRIDC,CHTOT,CVTOT,-1.0)
+            LSOL = .FALSE.
+            Ediel_sol = 0.0
+
+          ELSE IF (NESCHEME .eq. 4) THEN
+            IF (NSTEP > 1) THEN
+              INFO%NELECT = INFO%NELECT + echange
+              DO I=1,GRIDC%MPLWV
+                DO J=1,WDES%NCDIJ
+                  CHTOT(I,J) = CHTOT(I,J) * (INFO%NELECT) / (INFO%NELECT - echange)
+                END DO
+              END DO
+            END IF
+            CALL ELECTRONIC_OPTIMIZATION
+            CALL SOL_VCORRECTION(INFO,T_INFO,LATT_CUR,P,WDES,GRIDC,CHTOT,CVTOT,-1.0)
+            LSOL = .FALSE.
+            Ediel_sol = 0.0
+            PnDrv = -(EFERMI + FERMISHIFT - TARGETMU)
+            Pn = Pn + PnDrv * DYN%POTIM
+!           nDrv = Pn/Mn
+!           n = n + nDrv*dt
+            echange = Pn * DYN%POTIM / Mn
+            if (ABS(echange) .gt. ECHANGE_MAX .AND. ECHANGE_MAX .gt. 0) echange = sign(ECHANGE_MAX, echange)
+            old_phi = EFERMI + FERMISHIFT
+
+          ELSE
+            IF (IO%IU0>=0) WRITE(TIU0, *) "WARNING! An improper NESCHEME is chosen. Constant potential is ignored."
+
+          END IF
+        end if
+        IF (NESCHEME .ge. 1 .AND. NESCHEME .le. 4) CALL ELECTRONIC_OPTIMIZATION
+
+      else if (LCEP .AND. (DYN%IBRION==-1 .OR. DYN%IBRION==1 .OR. DYN%IBRION==2 .OR. DYN%IBRION==3)) then
+        capmin = 0.0
+        CAPACITANCE = 0.5
+        if (NSTEP == 1) old_cap = 0.1
+      
+        IF (NESCHEME .eq. 1) THEN
+          IF (NSTEP == 1) THEN
+            SCF_COUNTER = 1
+            DO
+              if (SCF_COUNTER > 1) then
+                INFO%NELECT = INFO%NELECT + echange
+                DO I=1,GRIDC%MPLWV
+                  DO J=1,WDES%NCDIJ
+                    CHTOT(I,J) = CHTOT(I,J) * (INFO%NELECT) / (INFO%NELECT - echange)
+                  END DO
+                END DO
+              end if
+
+              CALL ELECTRONIC_OPTIMIZATION
+              IF (SCF_COUNTER == 1) THEN
+                echange = sign(INIT_ECHANGE, (TARGETMU - EFERMI - FERMISHIFT))
+              ELSE
+                CAPACITANCE  = (INFO%NELECT - old_nele) / (EFERMI + FERMISHIFT - old_phi)
+                if (CAPACITANCE .lt. capmin) then
+                  CAPACITANCE = old_cap
+                endif
+                if (CAPACITANCE .gt. CAP_MAX) then
+                  CAPACITANCE = CAP_MAX
+                endif
+                echange = (TARGETMU - EFERMI - FERMISHIFT) * CAPACITANCE
+              ENDIF
+              if (ABS(echange) .gt. ECHANGE_MAX .AND. ECHANGE_MAX .gt. 0) echange = sign(ECHANGE_MAX, echange)
+
+              old_nele = INFO%NELECT
+              old_phi = EFERMI + FERMISHIFT
+              old_cap = CAPACITANCE
+              IF (ABS(TARGETMU - old_phi) < FERMICONVERGE) THEN
+                exit
+              ELSE
+                IF (IO%IU0>=0) WRITE(TIU0, 2981) NSTEP, SCF_COUNTER, INFO%NELECT, old_phi, TARGETMU, CAPACITANCE
+                SCF_COUNTER = SCF_COUNTER + 1
+              END IF
+            ENDDO
+
+          ELSE IF (NSTEP .gt. 1) THEN
+            INFO%NELECT = INFO%NELECT + echange
+            DO I=1,GRIDC%MPLWV
+              DO J=1,WDES%NCDIJ
+                CHTOT(I,J) = CHTOT(I,J) * (INFO%NELECT) / (INFO%NELECT-echange)
+              END DO
+            END DO
+            CALL ELECTRONIC_OPTIMIZATION
+            CAPACITANCE  = (INFO%NELECT - old_nele) / (EFERMI + FERMISHIFT - old_phi)
+            if (CAPACITANCE .lt. capmin) then
+              CAPACITANCE = old_cap
+            endif
+            if (CAPACITANCE .gt. CAP_MAX) then
+              CAPACITANCE = CAP_MAX
+            endif
+            echange = (TARGETMU - EFERMI - FERMISHIFT) * CAPACITANCE
+            if (ABS(echange) .gt. ECHANGE_MAX .AND. ECHANGE_MAX .gt. 0) echange = sign(ECHANGE_MAX, echange)
+            old_nele = INFO%NELECT
+            old_phi = EFERMI + FERMISHIFT
+            old_cap = CAPACITANCE
+          ENDIF
+
+        ELSE IF (NESCHEME == 2) THEN
+          IF (NSTEP .eq. 1) THEN
+            CALL ELECTRONIC_OPTIMIZATION
+            echange = sign(INIT_ECHANGE, (TARGETMU - EFERMI - FERMISHIFT))
+            old_phi = EFERMI + FERMISHIFT
+          ELSE IF(NSTEP > 1) THEN
+!            old_nele = INFO%NELECT
+!            old_phi = EFERMI + FERMISHIFT
+            INFO%NELECT = INFO%NELECT + echange
+
+            DO I=1,GRIDC%MPLWV
+              DO J=1,WDES%NCDIJ
+                CHTOT(I,J) = CHTOT(I,J) * (INFO%NELECT) / (INFO%NELECT-echange)
+              END DO
+            END DO
+
+            CALL ELECTRONIC_OPTIMIZATION
+            CAPACITANCE  = (INFO%NELECT - old_nele) / (EFERMI + FERMISHIFT - old_phi)
+            if (CAPACITANCE .lt. capmin) then
+              CAPACITANCE = old_cap
+            endif
+            if (CAPACITANCE .gt. CAP_MAX) then
+              CAPACITANCE = CAP_MAX
+            endif
+            echange = (TARGETMU - EFERMI - FERMISHIFT) * CAPACITANCE
+            if (ABS(echange) .gt. ECHANGE_MAX .AND. ECHANGE_MAX .gt. 0) echange = sign(ECHANGE_MAX, echange)
+            old_nele = INFO%NELECT
+            old_phi = EFERMI + FERMISHIFT
+            old_cap = CAPACITANCE
+          ENDIF
+
+        ELSE IF (NESCHEME == 3) THEN
+          SCF_COUNTER = 1
+          DO
+            if (NSTEP > 1 .OR. SCF_COUNTER > 1) then
+              INFO%NELECT = INFO%NELECT + echange
+              DO I=1,GRIDC%MPLWV
+                DO J=1,WDES%NCDIJ
+                  CHTOT(I,J) = CHTOT(I,J) * (INFO%NELECT) / (INFO%NELECT - echange)
+                END DO
+              END DO
+            end if
+
+            CALL ELECTRONIC_OPTIMIZATION
+            
+            IF (NSTEP == 1 .AND. SCF_COUNTER == 1) THEN
+              echange = sign(INIT_ECHANGE, (TARGETMU - EFERMI - FERMISHIFT))
+            ELSE
+              CAPACITANCE  = (INFO%NELECT - old_nele) / (EFERMI + FERMISHIFT - old_phi)
+              if (CAPACITANCE .lt. capmin) then
+                CAPACITANCE = old_cap
+              endif
+              if (CAPACITANCE .gt. CAP_MAX) then
+                CAPACITANCE = CAP_MAX
+              endif
+              echange = (TARGETMU - EFERMI - FERMISHIFT) * CAPACITANCE
+            ENDIF
+            if (ABS(echange) .gt. ECHANGE_MAX .AND. ECHANGE_MAX .gt. 0) echange = sign(ECHANGE_MAX, echange)
+            old_nele = INFO%NELECT
+            old_phi = EFERMI + FERMISHIFT
+            old_cap = CAPACITANCE
+            IF (ABS(TARGETMU - old_phi) < FERMICONVERGE) THEN 
+              exit
+            ELSE
+              IF (IO%IU0>=0) WRITE(TIU0, 2981) NSTEP, SCF_COUNTER, INFO%NELECT, old_phi, TARGETMU, CAPACITANCE
+              SCF_COUNTER = SCF_COUNTER + 1
+            END IF
+          ENDDO
+        ELSE
+          IF (IO%IU0>=0) WRITE(TIU0, *) "WARNING! An improper NESCHEME is chosen. Constant potential is ignored."
+        END IF        
+      else
+        CALL ELECTRONIC_OPTIMIZATION
+      end if
+
+!======================= end of cpm modifcation =====================!
 
       ! possibly orbitals have been updated
       ! force them to be real again be calling WVREAL_PRECISE
@@ -3488,6 +3875,13 @@
               IF (IO%IU0>=0) WRITE(TIU0,*)
          ENDIF
 
+!cpm
+         IF (LCEP) THEN
+           GCE = (TOTEN-EENTROPY/(2+NORDER))+(CNNE-INFO%NELECT)*TARGETMU
+           WRITE(17,1111) NSTEP, INFO%NELECT, old_phi, TARGETMU, GCE
+           IF (IO%IU0>=0) WRITE(TIU0,1111) NSTEP, INFO%NELECT, old_phi, TARGETMU, GCE
+         ENDIF
+
          IF (M_CONSTRAINED()) CALL WRITE_CONSTRAINED_M(17,.TRUE.)
 
          io_end
@@ -3643,6 +4037,19 @@
                 IF (IO%IU0>=0) WRITE(TIU0,*)
         ENDIF
 
+!cpm
+        IF (LCEP .AND. (NSTEP == 1 .OR. MOD(NSTEP, NEADJUST) == 0)) THEN
+          GCE = (TOTEN-EENTROPY/(2+NORDER))+(CNNE-INFO%NELECT)*TARGETMU
+          if (NESCHEME == 1 .or. NESCHEME == 2 .or. NESCHEME == 3) then 
+            IF (IO%IU0>=0) WRITE(17, 1111) NSTEP, INFO%NELECT, old_phi, TARGETMU, GCE
+            IF (IO%IU0>=0) WRITE(TIU0,1111) NSTEP, INFO%NELECT, old_phi, TARGETMU, GCE
+          else if (NESCHEME == 4) then
+            IF (IO%IU0>=0) WRITE(17, 1112) NSTEP, INFO%NELECT, old_phi, TARGETMU, GCE, Pn 
+            IF (IO%IU0>=0) WRITE(TIU0,1112) NSTEP, INFO%NELECT, old_phi, TARGETMU, GCE, Pn 
+          end if
+        ENDIF
+1112 FORMAT('CPM-ion: NSTEP= ',I4,' N_ele= ',F12.6,' mu_e= ',F10.6,' TARGETMU= ',F10.6,' GCE= ',E14.8, ' Pn= ',F10.6)
+
     IF ((.NOT. LJ_ONLY) .AND. (LDO_AB_INITIO)) THEN
         WRITE(TIU6,7270) DISMAX
     END IF         ! LJ_ONLY AND LDO_AB_INITIO
@@ -3843,10 +4250,17 @@
                 WRITE(17,*)
                 IF (IO%IU0>=0) WRITE(TIU0,*)
         ENDIF
+!cpm
+        IF (LCEP) THEN
+          GCE = (TOTEN-EENTROPY/(2+NORDER))+(CNNE-INFO%NELECT)*TARGETMU
+          WRITE(17,1111) NSTEP, INFO%NELECT, old_phi, TARGETMU, GCE
+          IF (IO%IU0>=0) WRITE(TIU0,1111) NSTEP, INFO%NELECT, old_phi, TARGETMU, GCE
+        ENDIF
 
         io_end
  7281 FORMAT(I4,' F= ',E14.8,' E0= ',E14.8,1X,' d E =',E12.6)
 77281 FORMAT('  mag=',3F11.4)
+ 1111 FORMAT('CPM-ion: NSTEP= ',I4,' N_ele= ',F12.6,' mu_e= ',F10.6,' TARGETMU= ',F10.6,' GCE= ',E14.8)
 !-----------------------------------------------------------------------
 !  set DYN%D2C to forces in cartesian coordinates multiplied by FACT
 !  FACT is determined from timestep in a way, that a stable timestep
--- pot.F	2023-11-21 23:15:33.290955302 -0500
+++ pot.F	2023-11-21 23:14:11.726059811 -0500
@@ -363,7 +363,9 @@
 !-----------------------------------------------------------------------
 ! add the dielectric corrections to CVTOT and the energy
 !-----------------------------------------------------------------------
-      CALL SOL_Vcorrection(INFO,T_INFO,LATT_CUR,P,WDES,GRIDC,CHTOT,CVTOT)
+!cpm
+    ! CALL SOL_Vcorrection(INFO,T_INFO,LATT_CUR,P,WDES,GRIDC,CHTOT,CVTOT)
+    CALL SOL_VCORRECTION(INFO,T_INFO,LATT_CUR,P,WDES,GRIDC,CHTOT,CVTOT, 1.000)
 ! solvation__
 !-----------------------------------------------------------------------
 !  add local pseudopotential potential
--- reader.F	2023-11-21 23:15:35.886047763 -0500
+++ reader.F	2023-11-21 23:14:16.141213385 -0500
@@ -25,6 +25,8 @@
 #ifdef libbeef
      &       ,LBEEFENS,LBEEFBAS &
 #endif
+!cpm
+             ,TARGETMU,INIT_ECHANGE,ECHANGE_MAX,CAP_MAX,NEADJUST,NESCHEME,FERMICONVERGE,LCEP,Pn,Mn &
      &       )
 
 
@@ -82,6 +84,10 @@
       LOGICAL   LSPIRAL,LZEROZ
       REAL(q)   QSPIRAL(3)
 !-MM- end of addition
+!cpm
+      REAL(q)   TARGETMU, FERMICONVERGE, INIT_ECHANGE, ECHANGE_MAX, CAP_MAX, Pn, Mn
+      INTEGER   NEADJUST, NESCHEME
+      LOGICAL   LCEP
 
       CALL OPEN_INCAR_IF_FOUND(IU5, LOPEN)
 
@@ -850,6 +856,37 @@
       IF (INPLIN(1:1)=='e') FFTW_PLAN_EFFORT=0
       IF (INPLIN(1:1)=='m') FFTW_PLAN_EFFORT=1
 
+!cpm
+      TARGETMU = -4.6
+      CALL PROCESS_INCAR(LOPEN, IU0, IU5, 'TARGETMU', TARGETMU, IERR, WRITEXMLINCAR)
+
+      INIT_ECHANGE = 0.1
+      CALL PROCESS_INCAR(LOPEN, IU0, IU5, 'INIT_ECHANGE', INIT_ECHANGE, IERR, WRITEXMLINCAR)
+
+      ECHANGE_MAX = 0.0
+      CALL PROCESS_INCAR(LOPEN, IU0, IU5, 'ECHANGE_MAX', ECHANGE_MAX, IERR, WRITEXMLINCAR)
+
+      CAP_MAX = 2.0
+      CALL PROCESS_INCAR(LOPEN, IU0, IU5, 'CAP_MAX', CAP_MAX, IERR, WRITEXMLINCAR)
+
+      FERMICONVERGE = 0.05
+      CALL PROCESS_INCAR(LOPEN, IU0, IU5, 'FERMICONVERGE', FERMICONVERGE, IERR, WRITEXMLINCAR)
+
+      LCEP = .FALSE.
+      CALL PROCESS_INCAR(LOPEN, IU0, IU5, 'LCEP', LCEP, IERR, WRITEXMLINCAR)
+
+      NEADJUST = 5
+      CALL PROCESS_INCAR(LOPEN, IU0, IU5, 'NEADJUST', NEADJUST, IERR, WRITEXMLINCAR)
+
+      NESCHEME = 1
+      CALL PROCESS_INCAR(LOPEN, IU0, IU5, 'NESCHEME', NESCHEME, IERR, WRITEXMLINCAR)
+
+      Pn = 0.0
+      CALL PROCESS_INCAR(LOPEN, IU0, IU5, 'Pn', Pn, IERR, WRITEXMLINCAR)
+
+      Mn = 10.0
+      CALL PROCESS_INCAR(LOPEN, IU0, IU5, 'Mn', Mn, IERR, WRITEXMLINCAR)
+
 #ifdef libbeef
 ! read in flag LBEEFENS 
       LBEEFENS=.FALSE.
--- solvation.F	2023-11-21 23:15:38.600144464 -0500
+++ solvation.F	2023-11-21 23:14:25.030527744 -0500
@@ -1778,6 +1778,10 @@
  PUBLIC :: GET_FERMISHIFT
  ! vaclevel
 
+ !cpm
+ REAL(q), PUBLIC, SAVE :: FERMISHIFT = 0._q
+ LOGICAL, PUBLIC, SAVE :: FSOLV_CORR = .TRUE.
+
  PRIVATE :: IONIC_CHARGE, GETRCORE, Fcorrection, JDFTX_INTERFACE
 
  INTEGER, PRIVATE, SAVE :: PK_counter = 1
@@ -2219,8 +2223,11 @@
 !-------------------------------------------------------------
 !calculate force correction,flag=5(not used)
 !-------------------------------------------------------------
+!cpm
+   IF (FSOLV_CORR) THEN
    CALL Fcorrection(SP_GRIDC,SP_P,SP_T_INFO,SP_LATT_CUR, &
         & Vcorr,Vdiel, EIFOR_SOL)
+   ENDIF
 
 !-------------------------------------------------------------
 !net correction potential
@@ -2792,6 +2799,8 @@
   IF (SP_IO%IU0>=0)  WRITE(SP_IO%IU0,*) 'VACPOT_PSP = ', VACPOT_PSP
 #endif
   VACPOT = VACPOT_POIS - VACPOT_PSP
+!cpm
+  FERMISHIFT = VACPOT
   IF (SP_IO%IU0>=0)  WRITE(SP_IO%IU0,*) ' FERMI_SHIFT = ', VACPOT
 !#ifdef debugsolwf
 !  !shift by vacpot                                                
@@ -2837,7 +2846,7 @@
   LOGICAL, SAVE :: LRHOION=.FALSE.
 
 !energy and force
-  REAL(q), PUBLIC, SAVE :: Ediel_SOL = 0._q
+  REAL(q), PUBLIC, SAVE :: Ediel_sol = 0._q
   REAL(q), PUBLIC, ALLOCATABLE, SAVE :: EIFOR_SOL(:,:)
 !solvation params
   REAL(q), PRIVATE, SAVE  :: sigma_k = 0.6_q
@@ -2886,7 +2895,7 @@
     ALLOCATE(EIFOR_SOL(3,NIONS))
 
     EIFOR_SOL = 0._q
-    Ediel_SOL = 0._q
+    Ediel_sol = 0._q
     IO_1 = IO
     EDIFF_1 = EDIFF
     EDIFFSOL = EDIFF/100._q
@@ -3198,8 +3207,9 @@
 !
 !
 !***********************************************************************
+!cpm - added plusorminus
   SUBROUTINE SOL_VCORRECTION(INFO, T_INFO, LATT_CUR, P, WDES, GRIDC, &
-       & CHTOT, CVTOT)
+       & CHTOT, CVTOT, plusorminus)
 
     USE base
     USE poscar
@@ -3225,6 +3235,8 @@
     REAL(q) :: Ecorr, EDIFF
     COMPLEX(q), ALLOCATABLE :: Vcorr(:)
     INTEGER :: I
+!cpm
+    REAL plusorminus
 
 ! early exit if possible
     IF (.NOT.LSOL) RETURN
@@ -3238,11 +3250,12 @@
     CALL VCORRECTION(GRIDC, P, LATT_CUR, T_INFO, WDES, &
          & CHTOT, Vcorr, Ecorr, EIFOR_SOL) 
 
+!cpm
     DO I = 1, GRIDC%RC%NP
-       CVTOT(I,1) = CVTOT(I,1) + Vcorr(I)
+       CVTOT(I,1) = CVTOT(I,1) + Vcorr(I) * plusorminus
     ENDDO
 
-    Ediel_sol = Ecorr
+    Ediel_sol = Ecorr * plusorminus
 
 !setting the value of epsilon used in computing the dipole and monopole corrections            
 !to EB_K
